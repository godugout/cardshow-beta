
import { useState } from 'react';
import { toast } from 'sonner';
import { MemorabiliaType } from '@/components/card-upload/cardDetection';
import { useImageProcessing } from '@/hooks/useImageProcessing';
import { useCards } from '@/context/CardContext';

export const useUploadHandling = (onComplete?: (cardIds: string[]) => void) => {
  const [uploadType, setUploadType] = useState<'group' | 'memorabilia' | 'mixed'>('group');
  const [uploadedFiles, setUploadedFiles] = useState<Array<{ file: File; url: string; type?: MemorabiliaType }>>([]);
  const [isProcessing, setIsProcessing] = useState(false);
  const [showEditor, setShowEditor] = useState(false);
  const [currentFile, setCurrentFile] = useState<File | null>(null);
  const [currentImageUrl, setCurrentImageUrl] = useState<string | null>(null);
  
  const { addCard } = useCards();
  const { createThumbnail } = useImageProcessing();

  // Get the appropriate memorabilia types based on the upload type
  const getMemorabiliaTypes = (): MemorabiliaType[] => {
    switch (uploadType) {
      case 'group':
        return ['face'];
      case 'memorabilia':
        return ['card', 'ticket', 'program', 'autograph'];
      case 'mixed':
        return ['face', 'card', 'ticket', 'program', 'autograph'];
      default:
        return ['face', 'card', 'ticket', 'program', 'autograph'];
    }
  };
  
  // Handle file selection
  const handleFileSelected = async (file: File) => {
    try {
      if (!file.type.match('image.*')) {
        toast.error('Please upload an image file');
        return;
      }
      
      if (file.size > 15 * 1024 * 1024) {
        toast.error('File size should be less than 15MB');
        return;
      }
      
      // Create a URL for the file
      const imageUrl = URL.createObjectURL(file);
      
      // Store the current file and URL
      setCurrentFile(file);
      setCurrentImageUrl(imageUrl);
      
      // Show the editor
      setShowEditor(true);
    } catch (error) {
      console.error('Error processing file:', error);
      toast.error('Error processing file');
    }
  };
  
  // Handle batch upload from editor
  const handleBatchUpload = (files: File[], urls: string[], types?: MemorabiliaType[]) => {
    const newUploads = files.map((file, index) => ({
      file,
      url: urls[index],
      type: types ? types[index] : undefined
    }));
    
    setUploadedFiles([...uploadedFiles, ...newUploads]);
    toast.success(`${files.length} images added to processing queue`);
  };
  
  // Remove a file from the upload queue
  const handleRemoveFile = (index: number) => {
    const newFiles = [...uploadedFiles];
    newFiles.splice(index, 1);
    setUploadedFiles(newFiles);
  };
  
  // Process all uploaded files to create cards
  const processUploads = async () => {
    if (uploadedFiles.length === 0) {
      toast.error('Please upload at least one image');
      return;
    }
    
    setIsProcessing(true);
    const cardIds: string[] = [];
    
    try {
      // Process each uploaded file
      for (const upload of uploadedFiles) {
        const cardType = upload.type || 'face';
        let title = '';
        
        // Set title based on type
        switch (cardType) {
          case 'face':
            title = 'Group Photo';
            break;
          case 'card':
            title = 'Baseball Card';
            break;
          case 'ticket':
            title = 'Game Ticket';
            break;
          case 'program':
            title = 'Game Program';
            break;
          case 'autograph':
            title = 'Autograph';
            break;
          default:
            title = 'Memory Item';
        }
        
        // Generate a thumbnail for better performance
        const thumbnailUrl = await createThumbnail(upload.file, 300);
        
        // Create the card
        const card = await addCard({
          title,
          description: `Automatically created from group memory upload (${cardType})`,
          imageUrl: upload.url,
          thumbnailUrl: thumbnailUrl,
          tags: ['auto-generated', cardType],
          isPublic: false,
          designMetadata: {
            memorabiliaType: cardType,
            autoGenerated: true
          }
        });
        
        if (card?.id) {
          cardIds.push(card.id);
        }
      }
      
      toast.success(`Successfully created ${cardIds.length} cards`);
      
      // Clear the uploads after processing
      setUploadedFiles([]);
      
      // Call the onComplete callback with the created card IDs
      if (onComplete && cardIds.length > 0) {
        onComplete(cardIds);
      }
      
    } catch (err: any) {
      console.error('Error processing uploads:', err);
      toast.error('Failed to process uploads: ' + err.message);
    } finally {
      setIsProcessing(false);
    }
  };

  return {
    uploadType,
    setUploadType,
    uploadedFiles,
    setUploadedFiles,
    isProcessing,
    showEditor,
    setShowEditor,
    currentFile,
    currentImageUrl,
    handleFileSelected,
    handleBatchUpload,
    handleRemoveFile,
    processUploads,
    getMemorabiliaTypes
  };
};
